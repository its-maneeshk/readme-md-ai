import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import ora from 'ora';
import inquirer from 'inquirer';
import boxen from 'boxen';
import { analyzeProject } from './analyzer/projectAnalyzer.js';
import { generateReadmeContent } from './generator/readmeGenerator.js';
import { validateApiKey } from './utils/validateApiKey.js';

export default async function run({ dir, templateType, apiKey, model }) {
    try {
        if (!fs.existsSync(dir)) {
            console.error(chalk.red(`‚ùå Directory does not exist: ${dir}`));
            return;
        }

        console.log(chalk.blue(`üìÅ Target Directory: ${dir}`));

        const spinner = ora('Analyzing project...').start();
        const metadata = analyzeProject(dir);
        spinner.succeed('‚úÖ Project analysis complete');

        let template = templateType;
        if (!template) {
            console.log(
                boxen(
                    chalk.bold.greenBright('üß© Choose a README Template') +
                    '\n\n' +
                    chalk.cyan('Minimal: ') +
                    'Clean, no-frills structure with essential sections only.\n' +
                    chalk.cyan('Professional: ') +
                    'Includes badges, installation, usage, license, and more.\n' +
                    chalk.cyan('Modern AI-Style: ') +
                    'Auto-generated by AI ‚Äî includes suggested features, demo sections, and more.\n\n' +
                    'Use arrow keys below to make your selection.',
                    {
                        padding: 1,
                        margin: 1,
                        borderStyle: 'round',
                        borderColor: 'cyan',
                    }
                )
            );

            const { selectedTemplate } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'selectedTemplate',
                    message: chalk.cyan('? Template:'),
                    choices: ['Minimal', 'Professional', 'Modern AI-Style'],
                },
            ]);
            template = selectedTemplate;
        }

        if (template === 'Modern AI-Style') {
            const noteBox = boxen(
                `${chalk.green.bold('üîí NOTE')}\n\n` +
                `For security purposes, we do not store your API key.\n` +
                `You‚Äôll need to enter it each time you generate a README.\n\n` +
                `${chalk.green('üëâ Get your free API key:')} https://openrouter.ai/keys\n` +
                `${chalk.green('üìñ See docs for help.')}`,
                {
                    padding: 1,
                    margin: 1,
                    borderStyle: 'round',
                    borderColor: 'green',
                    align: 'left',
                }
            );
            console.log(noteBox);

            while (!validateApiKey(apiKey)) {
                const { inputKey } = await inquirer.prompt([
                    {
                        type: 'password',
                        name: 'inputKey',
                        message: 'Enter your OpenAI API key:',
                        mask: '*',
                    },
                ]);
                apiKey = inputKey;

                if (!validateApiKey(apiKey)) {
                    console.log(chalk.red('‚ùå Invalid OpenAI API Key. It must start with "sk-". Try again.'));
                }
            }
        }

        const outputPath = path.join(dir, 'README.md');
        if (fs.existsSync(outputPath)) {
            const { overwrite } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'overwrite',
                    message: 'README.md already exists. Overwrite?',
                    default: false,
                },
            ]);
            if (!overwrite) {
                console.log(chalk.yellow('üö´ Aborted. README.md was not modified.'));
                return;
            }
        }

        const content = await generateReadmeContent(metadata, template, dir, model, apiKey);
        fs.writeFileSync(outputPath, content, 'utf8');

        // ‚úÖ Stylish Success Message
        const successMessage = `
${chalk.bold.green('‚úÖ README.md generated successfully!')}

${chalk.cyan('üìÑ Location:')} ${outputPath}
${chalk.gray('üìö Template:')} ${template}
${
  template === 'Modern AI-Style' && model === 'gpt-4'
    ? chalk.gray('‚ö†Ô∏è If GPT-4 was unavailable, GPT-3.5-Turbo was used as a fallback.\n')
    : ''
}
`;

        console.log(
            boxen(successMessage.trim(), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'greenBright',
            })
        );

    } catch (err) {
        console.error(chalk.red('‚ùå Error:'), err.stack || err.message);
        console.error(chalk.red(`‚ùå Both GPT-4 and GPT-3.5-Turbo failed.`));
        console.error(
            chalk.red(`üí° Please check your OpenAI billing or choose a different template (like Minimal or Professional).`)
        );
    }
}
